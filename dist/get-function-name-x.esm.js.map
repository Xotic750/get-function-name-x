{"version":3,"sources":["../src/get-function-name-x.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,eAAvB;AACA,OAAO,eAAP,MAA4B,oBAA5B;AACA,OAAO,SAAP,MAAsB,mBAAtB;AAEA,IAAM,WAAW,GAAG,UAAU,CAAC,WAA/B;AAEA,IAAI,QAAJ;AAEA;;AACA,IAAM,CAAC,GAAG,SAAS,KAAT,GAAiB,CAAE,CAA7B;;AAEA,IAAI,CAAC,CAAC,IAAF,KAAW,OAAf,EAAwB;AACtB,MAAM,gBAAgB,GAAG,WAAW,GAAG,IAAd,KAAuB,WAAhD;;AACA,EAAA,QAAQ,GAAG,SAAS,OAAT,CAAiB,EAAjB,EAAqB;AAC9B,WAAO,gBAAgB,IAAI,EAAE,CAAC,IAAH,KAAY,WAAhC,GAA8C,EAA9C,GAAmD,EAAE,CAAC,IAA7D;AACD,GAFD;AAGD,CALD,MAKO;AACL,MAAM,SAAS,GAAG,WAAW,CAAC,QAA9B;AACA,MAAM,MAAM,GAAG,mDAAf;AACA,MAAM,WAAW,GAAG,GAAG,KAAvB;;AACA,EAAA,QAAQ,GAAG,SAAS,OAAT,CAAiB,EAAjB,EAAqB;AAC9B,QAAI,KAAJ;;AACA,QAAI;AACF,MAAA,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,IAAV,CAAe,EAAf,CAAD,EAAqB,GAArB,CAAhB,CAA1B,EAAsE,MAAtE,CAAR;;AAEA,UAAI,KAAJ,EAAW;AACT,YAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;AAEA,eAAO,IAAI,KAAK,WAAT,GAAuB,EAAvB,GAA4B,IAAnC;AACD;AACF,KARD,CAQE,OAAO,MAAP,EAAe,CACf;AACD;;AAED,WAAO,EAAP;AACD,GAfD;AAgBD;AAED;;;;;;;;;;AAQA,IAAM,eAAe,GAAG,SAAS,eAAT,CAAyB,EAAzB,EAA6B;AACnD;AACA,SAAO,UAAU,CAAC,EAAD,EAAK,IAAL,CAAV,GAAuB,QAAQ,CAAC,EAAD,CAA/B,GAAsC,KAAK,CAAlD;AACD,CAHD;;AAKA,eAAe,eAAf","file":"get-function-name-x.esm.js","sourcesContent":["import isFunction from 'is-function-x';\nimport replaceComments from 'replace-comments-x';\nimport normalise from 'normalize-space-x';\n\nconst functionCtr = isFunction.constructor;\n\nlet $getName;\n\n/* eslint-disable-next-line lodash/prefer-noop */\nconst t = function test1() {};\n\nif (t.name === 'test1') {\n  const createsAnonymous = functionCtr().name === 'anonymous';\n  $getName = function getName(fn) {\n    return createsAnonymous && fn.name === 'anonymous' ? '' : fn.name;\n  };\n} else {\n  const fToString = functionCtr.toString;\n  const reName = /^(?:async )?(?:function|class) ?(?:\\* )?([\\w$]+)/i;\n  const stringMatch = ''.match;\n  $getName = function getName(fn) {\n    let match;\n    try {\n      match = stringMatch.call(normalise(replaceComments(fToString.call(fn), ' ')), reName);\n\n      if (match) {\n        const name = match[1];\n\n        return name === 'anonymous' ? '' : name;\n      }\n    } catch (ignore) {\n      // empty\n    }\n\n    return '';\n  };\n}\n\n/**\n * This method returns the name of the function, or `undefined` if not\n * a function.\n *\n * @param {Function} fn - The function to get the name of.\n * @returns {undefined|string} The name of the function,  or `undefined` if\n *  not a function.\n */\nconst getFunctionName = function getFunctionName(fn) {\n  /* eslint-disable-next-line no-void */\n  return isFunction(fn, true) ? $getName(fn) : void 0;\n};\n\nexport default getFunctionName;\n"]}